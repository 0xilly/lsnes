1 Introduction

lsnes is SNES rerecording emulator based on bsnes core.

2 Dependencies

1. bsnes libsnes (for bsnes SNES core)

  (a) v084-v087 (v084 or v085 for delayreset support)

  (b) accuracy or compatiblity core with debugger enabled.

  (c) Patched version (using included 7 patches)

2. gambatte (for gambatte core)

  (a) SVN r320, r358 or r364

  (b) Patched with included patches

3. Zlib

4. boost_iostreams

5. boost_filesystem

6. boost_thread (if native std::thread is not available)

7. libsdl (SDL only)

8. sdlmain (SDL only, part of SDL)

9. boost_conversion (this is header-only library)

10. libswscale (wxwidgets graphics only)

11. Portaudio (portaudio sound only)

12. libao (libao sound only)

13. Lua (if Lua support is needed) version 5.1.X or 5.2.X

14. G++ 4.6 or 4.7

15. libopus (optional, for commentary track tool)

3 Building

• Copy bsnes sources (the bsnes subdirectory) to subdirectory 
  'bsnes' (for bsnes core).

• Copy gambatte sources to subdirectory 'gambatte' (for gambatte 
  core).

• Patch the bsnes sources with included patches (directory 
  'bsnes-patches/<version>', bsnes core)

• Patch the gambatte sources with included patches (directory 
  'gambatte-patches/<version>', gambatte core)

• Edit options.build (or copy of that file)

• Run make (passing 'OPTIONS=<filename>' if using something else 
  than options.build).

4 Command line options

4.1 ROM options

4.1.1 --rom=<file> (lsnes/SDL, lsnes/wxwidgets, lsnes-avidump)

Load <file> as ROM.

4.1.2 <file> (lsnes/wxwidgets)

Load <file> as ROM.

4.2 Session options

4.2.1 --pause

Start paused

4.2.2 <filename> (lsnes/SDL, lsnes-avidump, movieinfo)

Load <filename> as movie or savestate file. All other session 
options are ignored.

4.2.3 --port1=<device> (lsnes/SDL, bsnes core only)

Set type of port1. Valid values are:

• none: No device connected

• gamepad: One gamepad (the default)

• multitap: Four gamepads (warning: makes most games refuse to 
  start)

• mouse: Mouse.

4.2.4 --port2=<type> (lsnes/SDL, bsnes core only)

Set type of port2. Valid values are:

• none: No device connected (the default)

• gamepad: One gamepad

• multitap: Four gamepads.

• mouse: Mouse

• superscope: Super Scope

• justifier: One justifier

• justifiers: Two justifiers

4.2.5 --gamename=<name> (lsnes/SDL)

Set the name of game to <name>. Default is blank.

4.2.6 --author=<name> (lsnes/SDL)

Add author with full name of <name> (no nickname).

4.2.7 --author=|<name> (lsnes/SDL)

Add author with nickname of <name> (no full name).

4.2.8 --author=<fullname>|<nickname> (lsnes/SDL)

Add author with full name of <fullname> and nickname of 
<nickname>.

4.2.9 --rtc-second=<value> (lsnes/SDL)

Set RTC second (0 is 1st January 1970 00:00:00Z). Default is 
1,000,000,000.

4.2.10 --rtc-subsecond=<value> (lsnes/SDL)

Set RTC subsecond. Range is 0-. Unit is CPU cycle. Default is 0.

4.2.11 --anchor-savestate=<file> (lsnes/SDL)

Set the anchor savestate file.

4.2.12 --load=<file> (lsnes/wxwidgets)

After loading the ROM, load <file> as savestate/movie.

4.3 Misc. options:

4.3.1 --run=<file> (lsnes/SDL)

After running main RC file, run this file. If multiple are 
specified, these execute in order specified.

4.3.2 --lua=<file> (lsnes/wxwidgets)

Run this Lua file on startup

4.4 dump options (lsnes-dumpavi only)

4.4.1 --dumper=<dumper>

Set the dumper to use (required). Use 'list' for listing of known 
dumpers.

4.4.2 --mode=<mode>

Set the mode to use (required for dumpers with multiple modes, 
forbidden otherwise). Use 'list' for known modes.

4.4.3 --prefix=<prefix>

Set dump prefix. Default is “avidump”.

4.4.4 --option=<name>=<value>

Set option <name> to value <value>.

4.4.5 --length=<length>

Set number of frames to dump. Mandatory.

4.4.6 --lua=<script>

Run specified lua script (lsnes-dumpavi does not have 
initialization files).

4.4.7 --load-library=<library>

Load the specified shared object / dynamic library / dynamic link 
library.

5 Startup file lsnes.rc

Upon startup, lsnes (lsnes/SDL only) executes file lsnes.rc as 
commands. This file is located in:

• Windows: %APPDATA%\lsnes\lsnes.rc (if %APPDATA% exists)

• Unix: $XDG_CONFIG_HOME/lsnes/lsnes.rc (if $XDG_CONFIG_HOME 
  exists)

• Unix: $HOME/.config/lsnes/lsnes.rc (if $HOME exists)

• All: ./lsnes.rc (fallback default).

If leading directories do not exist, attempt to create them is 
made.

6 Internal commands

• Commands beginning with '*' invoke the corresponding command 
  without alias expansion.

• If command starts with '+' (after possible '*'), the command is 
  executed as-is when button is pressed, and when button is 
  released, it is executed with '+' replaced by '-'.

• Commands without '+' execute only on negative edge (release).

6.1 Settings:

Settings control various aspects of emulator behaviour.

6.1.1 set-setting <setting> <value>

Sets setting <setting> to value <value> (may be empty).

6.1.2 unset-setting <setting>

Try to unset setting <setting> (not all settings can be unset).

6.1.3 get-setting <setting>

Read value of setting <setting>

6.1.4 show-settings

Print names and values of all settings.

6.2 Keybindings

Keybindings bind commands or aliases to keys (or pseudo-keys). 

Notes:

• Do not bind edge active (+/-) commands to keys with modifiers, 
  that won't work right!

• Names of keys and modifiers are platform-dependent.

• Be careful before binding pseudo-keys (such as joystick axes, 
  buttons or hats) with modifiers. That may or may not work 
  right.

6.2.1 bind-key [<mod>/<modmask>] <key> <command>

Bind <command> to key <key> (activating if modifiers in <modmask> 
(comma-seperated list) are set as <mod> (comma-seperated list).

The names of keys and modifiers are platform-dependent.

6.2.2 unbind-key [<mod>/<modmask>] <key>

Unbind command from <key> (with specified <mod> and <modmask>).

6.2.3 set-axis <axis> [disabled | axis | axis-inverse | 
  pressure0- | pressure0+ | pressure-0 | pressure-+ | pressure+0 
  | pressure+-] [minus=<val>] [zero=<val>] [plus=<val>] 
  [tolerance=<val>]

Set axis parameters for axis <axis>.

• disabled: Disable axis

• axis: Normal axis

• axis-inverse: Inverse axis

• pressure0-: Pressure sensitive. Released at 0, pressed at -.

• pressure0+: Pressure sensitive. Released at 0, pressed at +.

• pressure-0: Pressure sensitive. Released at -, pressed at 0.

• pressure-+: Pressure sensitive. Released at -, pressed at +.

• pressure+0: Pressure sensitive. Released at +, pressed at 0.

• pressure+-: Pressure sensitive. Released at +, pressed at -.

• minus=<val>: Calibration at extreme minus position 
  (-32768-32767)

• zero=<val>: Calibration at neutral position (-32768-32767)

• plus=<val>: Calibration at extreme plus position (-32768-32767)

• tolerance=<value>: Center band tolerance (0<x<1). The smaller 
  the value, the more sensitive the control is.

6.2.4 show-bindings

Print all key bindings in effect.

6.3 Aliases

Aliases bind command to sequence of commands. After alias has 
been defined, it replaces the command it shadows.

Notes:

• You can't alias command to itself.

• Aliases starting with +/- are edge active just like ordinary 
  commands starting with +/-.

• One command can be aliased to multiple commands.

6.3.1 alias-command <command> <expansion>

Append <expansion> to alias <command>. If alias does not already 
exist, it is created.

6.3.2 unalias-command <command>

Clear alias expansion for <command>.

6.3.3 show-aliases

Print all aliases and their expansions in effect.

6.4 run-script <script>

Run <script> as if commands were entered on the command line.

6.5 Video dumping

Following commands control video dumping:

6.5.1 start-dump <dumper> [<mode>] <prefix/filename>

Start dumping using dumper <dumper>. If mode is present or not 
and if prefix or filename is present depends on the dumper and 
dumper mode.

The following dumpers are available:

• INTERNAL-AVI-CSCD: Internal CSCD in .avi dumper.

  – Mode: uncompressed/pcm: Uncompressed video, PCM audio. Takes 
    prefix.

  – Mode: cscd/pcm: CSCD video, PCM audio. Takes prefix.

• INTERNAL-JMD: Internal .jmd dumper.

  – Does not take mode.

  – Takes a filename.

• INTERNAL-RAW: Internal RAW dumper.

  – Does not take mode.

  – Takes a prefix.

  – Sound is big-endian signed 16-bit, usually at 32040.5Hz.

  – Video is always upscaled to double resolution (512x448 / 512 
    x 478).

  – Video framerate is usually 322445/6448 fps for PAL and 
    10738636/178683 fps for NTSC.

• INTERNAL-SDMP: Internal SDMP dumper.

  – Mode 'ms': Multi-segment. Takes prefix.

  – Mode 'ss': Single-segment. Takes filename.

6.5.2 end-dump <dumper>

End dumping using <dumper>

6.5.3 show-dumpers [<dumper>]

Show the list of dumpers or list of modes for <dumper>

6.6 Memory manipulation

<address> may be decimal or hexadecimal (prefixed with '0x'). 
<value> can be hexadecimal (prefixed with '0x'), unsigned or 
signed (prefixed with '-') decimal.

The available element <sizes> are:

• byte: 1 byte

• word: 2 bytes

• dword: 4 bytes

• qword: 8 bytes

When reading RAM and ROM, multi-byte reads/writes are big-endian. 
When dealing with DSP memory, multi-byte reads/writes are 
native-endian (do not use operand sizes exceeding DSP bitness, 
except dword is OK for 24-bit memory).

6.6.1 read-<size> <address>

Read the value of byte in <address>.

6.6.2 read-s<size> <address>

Read the value of signed byte in <address>.

6.6.3 write-<size> <address> <value>

Write <value> to byte in address <address>.

6.6.4 search-memory reset

Reset the memory search

6.6.5 search-memory count

Print number of candidates remaining

6.6.6 search-memory print

Print all candidates remaining

6.6.7 search-memory <usflag><sizeflag><op>

Searches memory for addresses satisfying criteria.

<usflag> can be:

• u: unsigned

• s: signed

<sizeflag> can be:

• b: byte

• w: word

• d: dword

• q: qword

<op> can be:

• lt: < previous value.

• le: <= previous value.

• eq: = previous value.

• ne: != previous value.

• ge: >= previous value.

• gt: > previous value.

6.6.8 search-memory <sizeflag> <value>

Searches for addresses that currently have value <value>. 
<sizeflag> is as in previous command.

6.7 Main commands

These commands are not available in lsnesrc, but are available 
after ROM has been loaded.

6.7.1 quit-emulator [/y]

Quits the emulator (asking for confirmation). If /y is given, no 
confirmation is asked.

6.7.2 pause-emulator

Toggle paused/unpaused

6.7.3 +advance-frame 

Advance frame. If the button is still held after configurable 
timeout expires, game unpauses for the duration frame advance is 
held.

6.7.4 +advance-poll 

Advance subframe. If the button is still held after configurable 
timeout expires, game unpauses for the duration frame advance is 
held.

6.7.5 advance-skiplag 

Skip to first poll in frame after current.

6.7.6 reset 

Reset the SNES after this frame.

6.7.7 load <filename> 

Load savestate <filename> in current mode.

6.7.8 load-state <filename> 

Load savestate <filename> in readwrite mode.

6.7.9 load-readonly <filename> 

Load savestate <filename> in readonly mode.

6.7.10 load-preserve <filename> 

Load savestate <filename> in readonly mode, preserving current 
events.

6.7.11 load-movie <filename> 

Load savestate <filename>, ignoring save part in readonly mode.

6.7.12 save-state <filename> 

Save system state to <filename> as soon as possible.

6.7.13 save-movie <filename> 

Save movie to <filename>.

6.7.14 set-rwmode 

Set read-write mode.

6.7.15 set-romode 

Set read-only mode

6.7.16 toggle-rwmode 

Toggle between read-only and read-write modes.

6.7.17 set-gamename <name> 

Set name of the game to <name>

6.7.18 get-gamename 

Print the name of the game.

6.7.19 add-author <author> 

Adds new author <author>. If <author> does not contain '|' it is 
full name. If it contains '|', '|' splits the full name and 
nickname.

6.7.20 edit-author <num> <author> 

Edit the author in slot <num> (0-based) to be <author> (see 
add-author for format)

6.7.21 remove-author <num> 

Remove author in slot <num>

6.7.22 print-authors 

Print authors.

6.7.23 test-1, test-2, test-3

Internal test commands. Don't use.

6.7.24 take-screenshot <filename> 

Save screenshot to <filename>.

6.7.25 +controller<num><button>

Press button <button> on controller <num> (1-8). The following 
button names are known:

• left

• right

• up

• down

• A

• B

• X

• Y

• L

• R

• select

• start

• trigger

• cursor

• pause

• turbo

6.7.26 controllerh<num><button>

Hold/unhold button <button> on controller <num> (1-8). See 
+controller for button names.

6.7.27 controllerf<num><button>

Hold/unhold button <button> on controller <num> (1-8) for the 
next frame. See +controller for button names.

Cauntion: Does not work properly if outside frame advance.

6.7.28 autofire (<pattern>|-)...

Set autofire pattern. Each parameter is comma-separated list of 
button names (in form of 1start, 1A, 2B, etc..) to hold on that 
frame. After reaching the end of pattern, the pattern restarts 
from the beginning.

6.7.29 repaint

Force a repaint.

6.8 Save jukebox 

6.8.1 cycle-jukebox-backward

Cycle save jukebox backwards.

6.8.2 cycle-jukebox-forward

Cycle save jukebox forwards

6.8.3 load-jukebox

Do load from jukebox (current mode).

6.8.4 save-jukebox

Do state save to jukebox.

6.9 Lua 

Only available if lua support is compiled in.

6.9.1 evaluate-lua <luacode>

Run Lua code <luacode> using built-in Lua interpretter.

6.9.2 run-lua <script>

Run specified lua file using built-in Lua interpretter.

6.9.3 reset-lua

Clear the Lua VM state and restore to factory defaults.

6.10 Memory watch

6.10.1 add-watch <name> <expression>

Adds new watch (or modifies old one).

6.10.2 remove-watch <name>

Remove a watch.

6.11 Sound 

6.11.1 enable-sound <on/off> 

Enable/Disable sound.

6.11.2 set-sound-device <device> 

Set sound device to <device>

6.11.3 show-sound-status 

Show status of sound system.

6.11.4 show-sound-devices

Show all available devices.

6.11.5 set-volume <multiplier>

Set the volume multiplier to <multiplier>. 1 is normal volume, 
and higher numbers are louder.

6.11.6 set-volume <multiplier>%

Set the volume multiplier to <multiplier> percent. 100 is normal 
volume, and higher numbers are louder.

6.11.7 set-volume <multiplier>dB

Set the volume multiplier to <multiplier> dB. 0 is normal volume, 
and higher numbers are louder. The value may be negative.

6.12 Misc.

6.12.1 reload-rom [<file>]

Reloads the main ROM image from <file>.

6.12.2 edit-subtitle <firstframe> <length> [<text>]

Edit or delete a subtitle.

6.12.3 list-subtitle

List subtitles.

6.13 Commentary track

6.13.1 list-streams

List streams

6.13.2 play-stream <id>

Play stream <id>.

6.13.3 delete-stream <id>

Delete stream <id>

6.13.4 change-timebase <id> <newbase>

Change time base of <id> to <newbase>. The time base can be given 
as samples (integer) or second (postfix with s).

6.13.5 import-stream-opus <timebase> <file>

Import opus stream from <file>, placing it at <timebase>. This 
operation is lossless.

6.13.6 import-stream-pcm <timebase> <file>

Import PCM (.sox, 1ch@48kHz) stream from <file>, placing it at 
<timebase>.

6.13.7 export-stream-opus <id> <file>

Export stream <id> as opus stream to <file>. This operation is 
lossless.

6.13.8 export-stream-pcm <id> <file>

Export stream <id> as PCM (.sox) stream to <file>. 

6.13.9 export-superstream <file>

Export the entiere superstream as PCM (.sox) stream to <file>.

6.13.10 load-collection <file>

Load collection (if there is existing collection, unload it) from 
<file>

6.13.11 unload-collection

Unload collection.

6.13.12 +tangent

Tangent for recording voice for commentary track. While pressed, 
record a stream.

6.14 SDL Platform commands 

The following are valid on SDL platform.

6.14.1 identify-key

Asks to press a key and then identifies that (pseudo-)key.

6.14.2 toggle-console 

Toggle between windowed/fullscreen console.

6.14.3 scroll-fullup 

Scroll messages window as far back as it goes.

6.14.4 scroll-fulldown 

Scroll messages window as far forward as it goes.

6.14.5 scroll-up 

Scroll messages window back one screenful.

6.14.6 scroll-down 

Scroll messages window forward one screenful.

6.14.7 prompt-command <command>

Enter command prompt, with prompt prepopulated with specified 
command.

7 Settings

7.1 Core settings

7.1.1 firmwarepath

Set where bsnes looks for firmware files. Default is “.”.

7.1.2 target

Set the target . Numeric, range is 0.001 to “infinite”. Default 
is native framerate.

7.1.3 savecompression

Set save compression level (integer 0-9). Default is 7 (0 is no 
compression).

7.1.4 advance-timeout

Set the frame advance timeout in milliseconds. Numeric integer, 
range is 0-999999999. Default is 500.

7.1.5 advance-subframe-timeout

Subframe advance timeout in milliseconds. Default is 100.

7.1.6 save-every-frame (bsnes only)

If true, simulate saving on each frame. Trades off emulation 
accuracy for sync stability. Also needed if the movie assumes 
saving on each frame for rewind.

7.2 AVI dumper settings

7.2.1 avi-large

AVI dumper: Always dump at 512x448 or 512x478 regardless of what 
the console outputs.

7.2.2 avi-left-border

AVI dumper: Set the default left border thickness (unless lua 
overrides) for dumps. Range 0-8191. Default is 0.

7.2.3 avi-right-border

AVI dumper: Set the default right border thickness (unless lua 
overrides) for dumps. Range 0-8191. Default is 0.

7.2.4 avi-top-border

AVI dumper: Set the default top border thickness (unless lua 
overrides) for dumps. Range 0-8191. Default is 0.

7.2.5 avi-bottom-border

AVI dumper: Set the default bottom border thickness (unless lua 
overrides) for dumps. Range 0-8191. Default is 0.

7.2.6 avi-maxframes

AVI dumper: Maximum number of frames per dump segment (0 => 
unlimited). Range 0-999999999. Default is 0.

7.2.7 avi-compresison

AVI dumper: Compression level (0-18).

• Compression levels 10 and above are not compatible with stock 
  CSCD codec.

• Recomended level is 7.

7.2.8 avi-soundrate

AVI dumper: Set method of determining the sound rate.

• 0: Pick nearest of 8, 11.025, 12, 16, 22.05, 24, 32, 44.1, 48, 
  64, 88.2, 96, 128, 176.4 and 192 kHz.

• 1: Round down to nearest integer.

• 2: Round up to nearest ingeter.

7.3 JMD options

7.3.1 jmd-copression

JMD dumper: Compression level (0-9).

7.4 SDL platform settings

7.4.1 autorepeat-first-delay

Sets the delay for first character in typematic autorepeat.

7.4.2 autorepeat-subsequent-delay

Sets the delay for subsequent characters in typematic autorepeat.

8 Lua functions

8.1 Core (in main table)

8.1.1 print

Print line to message console.

8.1.2 exec(string command)

Run command as it was entered on the command line

8.1.3 utime()

Returns two values. First is time since some epoch in seconds, 
the second is microseconds mod 10^6 since that epoch.

8.1.4 emulator_ready()

Returns true if emulator has finished booting, false if not 
(on_startup() will be issued later).

8.1.5 set_idle_timeout(number timeout)

Set number of microseconds to block idle for. After this timeout 
has expired, on_idle() will be called once.

8.1.6 set_timer_timeout(number timeout)

Set number of microseconds to block timer for. After this timeout 
has expired, on_timer() will be called once.

8.1.7 bus_address(number snesaddr)

Returns virtual address corresponding to specified address on 
SNES bus.

8.1.8 loopwrapper(function fun, ...)

Calls function fun with function and specified arguments. The 
function passed suspends execution until the function returned is 
called. Handy for linear flow control among multiple invocations 
of a hook. Example code:

on_paint = loopwrapper(function(wait)

  while true do

    gui.text(0, 0, “Test!”);

    wait();

  end

end);

8.1.9 list_bindings([string cmd])

Get table of all keybindings, indexed by keyspec 
(modifiers|mask/key). If command is specified, the table is 
limited to that command.

8.1.10 get_alias(string aname)

Get expansion of given alias.

8.1.11 set_alias(string aname, string value)

Set expansion of given alias.

8.1.12 create_ibind(string name, string cmd)

Return object representing inverse binding with specified name 
and specified command.

• To create press/release commands, use aliases +foo and -foo .

• Keep the returned object around.

8.2 Table bit:

Bitwise logical functions and related.

8.2.1 bit.none(number...) / bit.bnot(number...)

48-bit bitwise NOT / NONE function (set bits that are set in none 
of the arguments).

8.2.2 bit.any(number...) / bit.bor(number...)

48-bit bitwise OR / ANY function (set bits that are set in any of 
the arguments).

8.2.3 bit.all(number...) / bit.band(number...)

48-bit bitwise AND / ALL function (set bits that are set in all 
of the arguments).

8.2.4 bit.parity(number...) / bit.bxor(number...)

48-bit bitwise XOR / PARITY function (set bits that are set in 
odd number of the arguments).

8.2.5 bit.lrotate(number base[, number amount[, number bits]])

Rotate bits-bit (max 48, default 48) number left by amount 
(default 1) places.

8.2.6 bit.rrotate(number base[, number amount[, number bits]])

Rotate bits-bit (max 48, default 48) number right by amount 
(default 1) places.

8.2.7 bit.lshift(number base[, number amount[, number bits]])

Shift bits-bit (max 48, default 48) number left by amount 
(default 1) places. The new bits are filled with zeroes.

8.2.8 bit.lrshift(number base[, number amount[, number bits]])

Shift bits-bit (max 48, default 48) number logically right by 
amount (default 1) places. The new bits are filled with zeroes.

8.2.9 bit.arshift(number base[, number amount[, number bits]])

Shift bits-bit (max 48, default 48) number arithmetically right 
by amount (default 1) places. The new bits are shifted in with 
copy of the high bit.

8.2.10 bit.extract(number base[, number bit0[, number bit1,...]])

Returns number that has bit0-th bit as bit 0, bit1-th bit as 1 
and so on.

Notes: 

• Bit numbers up to 51 should work reliably (then things start 
  falling apart due to double precision issues).

• There are two special bit positions, true and false, standing 
  for always set bit and always clear bit.

8.2.11 bit.value([number bit1[, number bit2,...]])

Returns bitwise OR of 1 left shifted by bit1 places, 1 left 
shifted by bit2 places and so on. As special value, nil argument 
is no-op.

8.2.12 bit.test_any(number a, number b)

Is there a common set bit in a and b?

8.2.13 bit.test_all(number a, number b)

Are all set bits in b also set in a?

8.2.14 bit.popcount(number a)

Population count of a.

8.2.15 bit.clshift(number a, number b, [number amount,[number 
  bits]])

Does chained left shift on a, b by amount positions, assuming 
numbers to be of specified number of bits.

8.2.16 bit.crshift(number a, number b, [number amount,[number 
  bits]])

Does chained right shift on a, b by amount positions, assuming 
numbers to be of specified number of bits.

8.2.17 bit.flagdecode(number a, number bits, [string on, [string 
  off]])

Return string of length bits where ith character is ith character 
of on if bit i is on, otherwise ith character of off. Out of 
range reads give last character, or '*'/'-' if empty.

8.2.18 bit.rflagdecode(number a, number bits, [string on, [string 
  off]])

Like bit.flagdecode, but outputs the string in the opposite order 
(most significant bit first).

8.3 Table gui:

Most of these functions can only be called in on_paint and 
on_video callbacks. Exceptions are noted.

Colors are 32-bit. Bits 0-7 are the blue component, bits 8-15 are 
the green component, bits 16-23 are the red component, bits 24-31 
are alpha component (0 is fully opaque, 255 is almost 
transparent). -1 is the fully transparent color. Alpha values 
greater than 127 do work.

Origin of coordinates is at top left corner of game display area. 
Left and top gaps correspond to negative coordinates.

8.3.1 gui.resolution()

Returns 2-tuple (hresolution, vresolution).

8.3.2 gui.<class>_gap(number gap)

Set the <class> (left, right, top, bottom) gap to specified value 
(max gap is 8191). If successful, old gap is returned.

8.3.3 gui.delta_<class>_gap(number gap)

Increase the <class> (left, right, top, bottom) gap by specified 
value (max gap is 8191) and return the old gap (returns nothing 
on error).

8.3.4 gui.text(number x, number y, string text[, number fgc[, 
  number bgc]])

Draw specified text on the GUI (each character cell is 8 or 16 
wide and 16 high). Parameters:

• x: X-coordinate to start the drawing from (and x-coordinate at 
  begining of the lines).

• y: Y-coordinate to start the drawing from.

• text: The text to draw.

• fgc: Text color (default is 0xFFFFFF (white))

• bgc: Background color (default is -1 (transparent))

8.3.5 gui.textH(number x, number y, string text[, number fgc[, 
  number bgc]])

Like gui.text, but draw using double-width.

8.3.6 gui.textV(number x, number y, string text[, number fgc[, 
  number bgc]])

Like gui.text, but draw using double-height.

8.3.7 gui.textHV(number x, number y, string text[, number fgc[, 
  number bgc]])

Like gui.text, but draw using double-width/double-height.

8.3.8 gui.rectangle(number x, number y, number width, number 
  height[, number thickness[, number outline[, number fill]]])

Draw rectangle on the GUI. Parameters:

• x: X-coordinate of left edge.

• y: Y-coordinate of upper edge.

• width: Width of rectangle.

• height: Height of rectangle.

• thickness: Thickness of outline (default is 1).

• outline: Color of outline (default is 0xFFFFFF (white))

• fill: Color of fill (default is -1 (transparent))

8.3.9 gui.box(number x, number y, number width, number height[, 
  number thickness[, number outline1[,number outline2[, number 
  fill]]]])

Draw rectangle with 3D effect on the GUI. Parameters:

• x: X-coordinate of left edge.

• y: Y-coordinate of upper edge.

• width: Width of rectangle.

• height: Height of rectangle.

• thickness: Thickness of outline (default is 1).

• outline1: First color of outline (default is 0xFFFFFF (white))

• outline2: First color of outline (default is 0x808080 (dark 
  gray))

• fill: Color of fill (default is 0xC0C0C0 (light grayy))

8.3.10 gui.pixel(number x, number y[, number color])

Draw one pixel on the GUI. Parameters:

• x: X-coordinate of the pixel

• y: Y-coordinate of the pixel

• color: Color of the pixel (default is 0xFFFFFF (white))

8.3.11 gui.crosshair(number x, number y[, number length[, number 
  color]])

Draw a crosshair. Parameters:

• x: X-coordinate of the crosshair

• y: Y-coordinate of the crosshair

• length: Length of the crosshair lines (default 10).

• color: Color of the crosshair (default is 0xFFFFFF (white))

8.3.12 gui.line(number x1, number y1, number x2, number y2[, 
  number color])

Draw a thin line. Parameters:

• x1: X-coordinate of one end.

• y1: Y-coordinate of one end.

• x2: X-coordinate of the other end.

• y2: Y-coordinate of the other end.

• color: Color of the line (default is 0xFFFFFF (white)).

8.3.13 gui.circle(number x, number y, number r[, number thick[, 
  number border[, number fil]]])

Draw a circle. Parameters.

• x: X-coordinate of the center

• y: Y-coordinate of the center

• r: The radius of the circle

• thick: Border thickness

• border: Border color (default is 0xFFFFFF (white))

• fill: Fill color (default is -1 (transparent)).

8.3.14 gui.bitmap_draw(number x, number y, bitmap bitmap, palette 
  palette)

Draw a bitmap on screen with specified palette. Parameters:

• x: X-coordinate of left edge.

• y: Y-coordinate of top edge.

• bitmap: The bitmap to draw

• palette: The palette to draw the bitmap using.

8.3.15 gui.bitmap_draw(number x, number y, dbitmap bitmap)

Draw a bitmap on screen. Parameters:

• x: X-coordinate of left edge.

• y: Y-coordinate of top edge.

• bitmap: The bitmap to draw

8.3.16 gui.palette_new()

Returns a new palette (initially all transparent). Can be used 
anywhere.

8.3.17 gui.bitmap_new(number w, number h, boolean direct[, bool 
  icolor])

Returns a new bitmap/dbitmap. Can be used anywhere. Parameters:

• w: The width of new bitmap

• h: The height of new bitmap

• direct: If true, the returned bitmap is dbitmap, otherwise 
  bitmap.

• icolor: Initital fill color (defaults to 0 on BITMAP, -1 on 
  DBITMAP)

8.3.18 gui.bitmap_load(string file)

Returns loaded bitmap/dbitmap (if bitmap, the second return value 
is palette for bitmap). Can be used anywhere. Parameters:

• file: The name of file to load.

8.3.19 gui.palette_set(palette palette, number index, number 
  color)

Sets color in palette. Can be used anywhere. Parameters:

• palette: The palette to manipulate

• index: Index of color (0-65535).

• color: The color value.

8.3.20 gui.bitmap_pset(bitmap/dbitmap bitmap, number x, number y, 
  number color)

Sets specified pixel in bitmap. Can be used anywhere. Parameters:

• bitmap: The bitmap to manipulate

• x: The x-coordinate of the pixel.

• y: The y-coordinate of the pixel.

• color: If bitmap is a bitmap, color index (0-65535). Otherwise 
  color value.

8.3.21 gui.bitmap_size(bitmap/dbitmap bitmap)

Get size of bitmap. Can be used anywhere. Parameters:

• bitmap: The bitmap to query.

The first return is the width, the second is the height.

8.3.22 gui.bitmap_blit(bitmap/dbitmap dest, number dx, number dy, 
  bitmap/dbitmap src, number sx, number sy, number w, number h[, 
  number ck])

Blit a part of bitmap to another. Can be used anywhere. 
Parameters:

• dest: Destination to blit to.

• dx: left edge of target

• dy: Top edge of target

• src: The source to blit from. Must be of the same type as 
  destination.

• sx: left edge of source

• sy: Top edge of source

• w: Width of region

• h: Height of region.

• ck: Color key. Pixels of this color are not blitted.

  – If bitmaps are bitmaps, this is color index of colorkey. 
    Values outside range 0-65535 cause no key to be used as 
    colorkey.

  – If bitmaps are dbitmaps, this color value of colorkey.

  – May be absent or nil for no colorkey blit.

8.3.23 gui.bitmap_load_png(string filename)

Load a bitmap from PNG file. Parameters:

• filename: The name of file to load the bitmap frame.

Return value:

• If the PNG is of color type 3 (PALETTE), returns two value. 
  First is BITMAP containing the image data from the PNG and 
  second is PALETTE containg the palette data from the PNG.

• For color types 0 (GRAY), 2 (RGB), 4 (GRAY_ALPHA) and 6 (RGBA), 
  returns one DBITMAP containg the image data loaded from the 
  PNG.

8.3.24 gui.bitmap_load_pal(string filename)

Load a palette from file. Parameters:

• filename: The name of the file.

The kinds of lines supported

• Blank or just whitespace: Ignored

• First non-whitespace is '#': Ignored

• <r> <g> <b>: Fully opaque color with specified RGB values 
  (0-255)

• <r> <g> <b> <a>: Color with specified RGB values (0-255) and 
  specified alpha (0-256, 0 being fully transparent and 256 fully 
  opaque).

• transparent: Fully transparent color

8.3.25 gui.bitmap_load_str(string content)

Like gui.bitmap_load, but reads the specified string directly as 
content.

8.3.26 gui.bitmap_load_png_str(string base64content)

Like gui.bitmap_load_png, but reads the specified string (as 
base64-encoded) directly as content.

8.3.27 gui.bitmap_load_pal_str(string content)

Like gui.bitmap_load_pal, but reads the specified string directly 
as content.

8.3.28 gui.repaint()

Request on_repaint() to happen as soon as possible. Can be used 
anywhere.

8.3.29 gui.subframe_update(boolean on)

Request subframe updates (calling on_paint() on subframes) to 
happen (on=true) or not happen (on=false). Can be used anywhere.

8.3.30 gui.screenshot(string filename)

Write PNG screenshot of the current frame (no drawings) to 
specified file. Can be used anywhere.

8.3.31 gui.color(number r, number g, number b[, number a])

Returns color (in notation Lua scripts use) corresponding to 
color (r,g,b), each component in scale 0-255. If a is specified, 
that is alpha (0 is fully transparent, 256(sic) is fully opaque). 
The default alpha is 256.

8.3.32 gui.status(string name, string value)

Set status field “L[<name>]” to <value> in status area. Can be 
used anywhere.

8.3.33 gui.rainbow(number step, number steps[, number color])

Perform hue rotation of color <color> (default bright red), by 
<step> steps. The number of steps per full rotation is given by 
absolute value of <steps>.

If <steps> is negative, the rotation will be counterclockwise.

8.3.34 gui.screenshot(string filename)

Saves a screenshot into specified file.

8.3.35 gui.loadfont(string filename)

Loads font from specified file (CUSTOMFONT object).

8.3.36 CUSTOMFONT(number x, number y, string text[, number fgc[, 
  number bgc[, number hlc]]])

Draw string with custom font to screen. The parameters are the 
same as in gui.text, except hlc is the halo color (default is no 
halo). 

8.4 table input

Input handling. Only available in on_input callback.

8.4.1 input.get(number controller, number index)

Read the specified index (0-11) from specified controller (0-7). 
Notes:

• Uses physical controller numbering. Gamepad in port 2 is 
  controller 4, not 1!

8.4.2 input.set(number controller, number index, number value)

Write the specified index (0-11) from specified controller (0-7), 
storing value. Notes:

• Uses physical controller numbering. Gamepad in port 2 is 
  controller 4, not 1!

8.4.3 input.get2(number port, number controller, number index)

Read the specified input tuple.

• Port 0 is system port.

8.4.4 input.set2(number port, number controller, number index, 
  number value)

Write the specified input tuple.

• Port 0 is system port.

8.4.5 input.lcid_to_pcid2(number lcid)

Look up physical pcid pair (port, controller) corresponding to 
specified logical controller (1-based). Returns nothing if 
controller does not exist.

8.4.6 input.port_type(number port)

Return type of specified port.

8.4.7 input.controller_info(number port, number controller)

Get controller info for specified controller. If controller does 
not exist, returns nil. Otherwise returns a table with following 
fields:

• type (string): Type of the controller.

• class (string): Class of the controller.

• classnum (number): Number of the controller within its class 
  (1-based)

• lcid (number): Logical controller number of the controller.

• button_count (number): Number of buttons on controller

• buttons (array): Array of following info about each button:

  – type (string): Type of button. Currently one of “null”, “
    button”, “axis”, “raxis”.

  – name (string): Name of button.

  – symbol (string): Symbol of button. Only present for type “
    button”.

  – hidden (boolean): True if hidden button. 

8.4.8 input.veto_button()

Signals that the button event should be vetoed. Only valid in 
on_button callback.

8.4.9 input.geta(number controller)

Get input state for entiere controller. Returns 13 return values.

• 1st return value: Bitmask: bit i is set if i:th index is 
  nonzero

• 2nd-13th return value: value of i:th index.

8.4.10 input.seta(number controller, number bitmask, number 
  args...)

Set state for entiere controller. args is up to 12 values for 
indices (overriding values in bitmask if specified).

8.4.11 input.controllertype(number controller)

Get the type of controller as string. Valid values are:

• gamepad

• mouse

• justifier

• superscope

8.4.12 input.reset([number cycles])

Execute reset. If cycles is greater than zero, do delayed reset. 
0 (or no value) causes immediate reset.

• Only available with subframe flag false.

8.4.13 input.raw()

Returns table of tables of all available keys and axes. The first 
table is indexed by key name (platform-dependent!), and the inner 
table has the following fields:

• last_rawval: Last reported raw value for control.

• ktype: Type of key (disabled, key, mouse, axis, axis-inverse, 
  hat, pressure-m0, pressure-mp, pressure-0m, pressure-0p, 
  pressure-pm, pressure-p0).

• cal_left: Minimum calibration value. Only meaningful with axis 
  and pressure types.

• cal_center: Center calibration value. Only meaningful with axis 
  and pressure types.

• cal_right: Maximum calibration value. Only meaningful with axis 
  and pressure types.

• cal_tolerance: Dead zone tolerance. Only meaningful with axis 
  and pressure types.

8.4.14 input.keyhook(string key, boolean state)

Requests that keyhook events to be sent for key (state=true) or 
not sent (state=false).

8.4.15 input.joyget(number controller)

Returns table for current controls for specified controller. The 
names of fields vary by controller type.

• The buttons have the same name as those are referred to in 
  other contexts in the emulator

• The analog axes are “xaxis” and “yaxis”.

8.4.16 input.joyset(number controller, table controls)

Set the the state of specified controller to values specified in 
specified table.

• nil does not change value

• true/false (buttons) and integers (axes) force value.

• string (button) inverts the input.

8.4.17 input.lcid_to_pcid(number controller)

Return the physical index, physical port and controller number in 
port for specified (1-based) logical controller.

8.5 Table subtitle

Subtitle handling

8.5.1 subtitle.byindex(number i)

Read the frame and length of ith subtitle. Returns nothing if not 
present.

8.5.2 subtitle.set(number f, number l, string txt)

Set the text of subtitle.

8.5.3 subtitle.get(number f, number l)

Get the text of subtitle.

8.5.4 subtitle.delete(number f, number l)

Delete specified subtitle.

8.6 Table hostmemory

Host memory handling (extra memory saved to savestates). Host 
memory starts empty.

8.6.1 hostmemory.read(number address)

Reads hostmemory slot address. Slot numbers out of range return 
false instead of numeric.

8.6.2 hostmemory.write(number address, number value)

Writes hostmemory slot with 0-255. Slot numbers out of range 
cause extension of host memory slot space.

8.6.3 hostmemory.readbyte(number address)

Read unsigned byte (1 element) from given address. Slots out of 
range return false.

8.6.4 hostmemory.writebyte(number address, number value)

Write unsigned byte (1 element) to given slot. Slot numbers out 
of range cause extension.

8.6.5 hostmemory.readsbyte(number address)

Read signed byte (1 element) from given address. Slots out of 
range return false.

8.6.6 hostmemory.writesbyte(number address, number value)

Write signed byte (1 element) to given slot. Slot numbers out of 
range cause extension.

8.6.7 hostmemory.readword(number address)

Read unsigned word (2 elements) from given address. Slots out of 
range return false.

8.6.8 hostmemory.writeword(number address, number value)

Write unsigned word (2 elements) to given slot. Slot numbers out 
of range cause extension.

8.6.9 hostmemory.readsword(number address)

Read signed word (2 elements) from given address. Slots out of 
range return false.

8.6.10 hostmemory.writesword(number address, number value)

Write signed word (2 elements) to given slot. Slot numbers out of 
range cause extension.

8.6.11 hostmemory.readdword(number address)

Read unsigned doubleword (4 elements) from given address. Slots 
out of range return false.

8.6.12 hostmemory.writedword(number address, number value)

Write unsigned doubleword (4 elements) to given slot. Slot 
numbers out of range cause extension.

8.6.13 hostmemory.readsdword(number address)

Read signed doubleword (4 elements) from given address. Slots out 
of range return false.

8.6.14 hostmemory.writesdword(number address, number value)

Write signed doubleword (4 elements) to given slot. Slot numbers 
out of range cause extension.

8.6.15 hostmemory.readqword(number address)

Read unsigned quadword (8 elements) from given address. Slots out 
of range return false.

8.6.16 hostmemory.writeqword(number address, number value)

Write unsigned quadword (4 elements) to given slot. Slot numbers 
out of range cause extension.

8.6.17 hostmemory.readsqword(number address)

Read signed quadword (8 elements) from given address. Slots out 
of range return false.

8.6.18 hostmemory.writesqword(number address, number value)

Write signed quadword (8 elements) to given slot. Slot numbers 
out of range cause extension.

8.7 Table movie

Movie handling

8.7.1 movie.currentframe()

Return number of current frame.

8.7.2 movie.framecount()

Return number of frames in movie.

8.7.3 movie.readonly()

Return true if in readonly mode, false if in readwrite.

8.7.4 movie.rerecords()

Returns the current value of rerecord count.

8.7.5 movie.set_readwrite()

Set readwrite mode (does not cause on_readwrite callback).

8.7.6 movie.frame_subframes(number frame)

Count number of subframes in specified frame (frame numbers are 
1-based) and return that.

8.7.7 movie.read_subframes(number frame, number subframe)

Read specifed subframe in specified frame and return data as 
array (100 elements, numbered 0-99 currently).

8.7.8 movie.read_rtc()

Returns the current value of the RTC as a pair (second, 
subsecond).

8.7.9 movie.unsafe_rewind([UNSAFEREWIND state])

Start setting point for unsafe rewind or jump to point of unsafe 
rewind.

• If called without argument, causes emulator to start process of 
  setting unsafe rewind point. When this has finished, callback 
  on_set_rewind occurs, passing the rewind state to lua script.

• If called with argument, causes emulator rewind to passed 
  rewind point as soon as possible. Readwrite mode is implicitly 
  activated.

The following warnings apply to unsafe rewinding:

• There are no safety checks against misuse (that's what “unsafe” 
  comes from)!

• Only call rewind from timeline rewind point was set from.

• Only call rewind from after the rewind point was set.

8.8 Table settings

Routines for settings manipulation

8.8.1 settings.get(string name)

Get value of setting. If setting is blank, returns false. If 
setting value can't be obtained, returns (nil, error message).

8.8.2 settings.set(string name, string value)

Set value of setting. If setting can't be set, returns (nil, 
error message).

8.8.3 settings.is_set(string name)

Returns if setting is set. If setting does not exist, returns 
(nil, error message).

8.8.4 settings.blank(string name)

Blanks a setting and returns true. If setting can't be blanked, 
returns (nil, error message).

8.9 Table memory

Contains various functions for managing memory

8.9.1 memory.vma_count()

Returns the number of VMAs

8.9.2 memory.read_vma(number index)

Reads the specified VMA (indices start from zero). Trying to read 
invalid VMA gives nil. The read VMA is table with the following 
fields:

• region_name (string): The readable name of the VMA

• baseaddr (number): Base address of the VMA

• lastaddr (number): Last address in the VMA.

• size (number): The size of VMA in bytes.

• readonly (boolean): True of the VMA corresponds to ROM.

• iospace (boolean): True if the VMA is I/O space.

• native_endian (boolean): True if the VMA has native endian as 
  opposed to little endian.

8.9.3 memory.find_vma(number address)

Finds the VMA containing specified address. Returns table in the 
same format as read_vma or nil if not found.

8.9.4 memory.readbyte(number address)

Reads the specified address as unsigned byte and returns the 
result.

8.9.5 memory.readsbyte(number address)

Reads the specified address as signed byte and returns the 
result.

8.9.6 memory.writebyte(number address, number value)

Writes the specified value (negative values undergo 2's 
complement) to specified address (as a byte).

8.9.7 memory.readword(number address)

Reads the specified address as unsigned word and returns the 
result.

8.9.8 memory.readsword(number address)

Reads the specified address as signed word and returns the 
result.

8.9.9 memory.writeword(number address, number value)

Writes the specified value (negative values undergo 2's 
complement) to specified address (as a word).

8.9.10 memory.readdword(number address)

Reads the specified address as unsigned doubleword and returns 
the result.

8.9.11 memory.readsdword(number address)

Reads the specified address as signed doubleword and returns the 
result.

8.9.12 memory.writedword(number address, number value)

Writes the specified value (negative values undergo 2's 
complement) to specified address (as a doubleword).

8.9.13 memory.readqword(number address)

Reads the specified address as unsigned quadword and returns the 
result.

8.9.14 memory.readsqword(number address)

Reads the specified address as signed quadword and returns the 
result.

8.9.15 memory.writeqword(number address, number value)

Writes the specified value (negative values undergo 2's 
complement) to specified address (as a quadword).

8.9.16 memory.hash_region(number base, number size)

Hash specified number of bytes starting from specified address 
and return the SHA-256.

8.9.17 memory.hash_state()

Hash the current system state. Mainly useful for debugging 
savestates.

8.9.18 memory.readregion(number base, number size)

Read a region of memory.

• Warning: If the region crosses VMA boundary, the results are 
  undefined.

8.9.19 memory.map<type>([number base, number size])

Returns a table mapping specified memory aperture for read/write. 
If parameters are omitted, entiere map space is the aperture.

• Type may be one of: byte, sbyte, word, sword, dword, sdword, 
  qword or sqword.

8.9.20 memory.writeregion(number base, number size, table data)

Write a region of memory.

• Warning: If the region crosses VMA boundary, the results are 
  undefined.

8.9.21 memory.map_structure()

Returns a new mapping structure (MMAP_STRUCT)

8.9.22 MMAP_STRUCT(string key, number address, string type)

Bind key in mmap structure to specified address with specified 
type.

• Type may be one of: byte, sbyte, word, sword, dword, sdword, 
  qword or sqword.

8.9.23 memory.read_expr(string expr)

Evaluate specified watch expression and return result

8.10 Table subtitle

Contains functions for manipulating subtitles.

8.10.1 subtitle.byindex(number index)

Get (basetime, length) pair of specified subtitle index or 
nothing if index isn't valid.

8.10.2 subtitle.get(number basetime, number length)

Read the specified subtitle. Returns “” if the subtitle does not 
exist.

8.10.3 subtitle.set(number basetime, number length, string 
  content)

Set the specified subtitle.

8.10.4 subtitle.deltete(number basetime, number length)

Delete the specified subtitle.

8.11 Table _SYSTEM

Contains copy of global variables from time of Lua 
initialization. Non-writeable.

8.12 Callbacks

Various callbacks to Lua that can occur.

8.12.1 Callback: on_paint(bool not_synth)

Called when screen is being painted. Any gui.* calls requiring 
graphic context draw on the screen.

not_synth is true if this hook is being called in response to 
received frame, false otherwise.

8.12.2 Callback: on_video()

Called when video dump frame is being painted. Any gui.* calls 
requiring graphic context draw on the video.

8.12.3 Callback: on_frame_emulated()

Called when emulating frame has completed and 
on_paint()/on_video() calls are about to be issued.

8.12.4 Callback: on_frame()

Called on each starting whole frame.

8.12.5 Callback: on_startup()

Called when the emulator is starting (lsnes.rc and --run files 
has been run).

8.12.6 Callback: on_rewind()

Called when rewind movie to beginning has completed.

8.12.7 Callback: on_pre_load(string name)

Called just before savestate/movie load occurs (note: loads are 
always delayed, so this occurs even when load was initiated by 
lua).

8.12.8 Callback: on_err_load(string name)

Called if loadstate goes wrong.

8.12.9 Callback: on_post_load(string name, boolean was_savestate)

Called on successful loadstate. was_savestate gives if this was a 
savestate or a movie.

8.12.10 Callback: on_pre_save(string name, boolean is_savestate)

Called just before savestate save occurs (note: movie saves are 
synchronous and won't trigger these callbacks if called from 
Lua).

8.12.11 Callback: on_err_save(string name)

Called if savestate goes wrong.

8.12.12 Callback: on_post_save(string name, boolean is_savestate)

Called on successful savaestate. is_savestate gives if this was a 
savestate or a movie.

8.12.13 Callback: on_quit()

Called when emulator is shutting down.

8.12.14 Callback: on_input(boolean subframe)

Called when emulator is just sending input to bsnes core. 
Warning: This is called even in readonly mode, but the results 
are ignored.

8.12.15 Callback: on_reset()

Called when SNES is reset.

8.12.16 Callback: on_readwrite()

Called when moving into readwrite mode as result of “set-rwmode” 
command (note: moving to rwmode by Lua won't trigger this, as per 
recursive entry protection).

8.12.17 Callback: on_snoop(number port, number controller, number 
  index, number value)

Called each time bsnes asks for input. The value is the final 
value to be sent to bsnes core (readonly mode, autohold and 
autofire have been taken into account). Might be useful when 
translating movies to format suitable for console verification. 
Note: There is no way to modify the value to be sent.

• Not called if callback on_snoop2 is defined.

8.12.18 Callback: on_snoop2(number port, number controller, 
  number index, number value)

Like on_snoop, but reserves port 0 for system, having first user 
port be port 1.

8.12.19 Callback: on_keyhook(string keyname, table state)

Sent when key that has keyhook events requested changes state. 
Keyname is name of the key (group) and state is the state (same 
kind as table values in input.raw).

8.12.20 Callback: on_idle()

Called when requested by set_idle_timeout(), the timeout has 
expired and emulator is waiting.

8.12.21 Callback: on_timer()

Called when requested by set_idle_timeout() and the timeout has 
expired (regardless if emulator is waiting).

8.12.22 Callback: on_set_rewind(UNSAFEREWIND r)

Called when unsafe rewind object has been constructed.

8.12.23 Callback: on_pre_rewind() 

Called just before unsafe rewind is about to occur.

8.12.24 Callback: on_post_rewind() 

Called just after unsafe rewind has occured.

8.12.25 Callback: on_button(number port, number controller, 
  number index, string type)

Called on controller button press, with following parameters:

• port: Port number (0 is system)

• controller: Controller within port

• index: Index of button.

• type: Type of event, one of:

  – “pressed”: Button was pressed.

  – “released”: Button was released.

  – “hold”: Held.

  – “unhold”: Released from hold.

  – “type”: Typing input on button.

  – “untype”: Typing input undone.

  – “analog”: Analog action on axis.

9 Movie editor

• The editor edits in-memory movie.

• Because past can't be edited and readwrite mode doesn't allow 
  future, editing only works in read only mode.

• Keyboard triggers the normal hotkeys and bindings.

9.1 Left button actions

• Clicking on cell in future (indicated by lack of redish 
  background) toggles it (if it is a button) or prompts for a 
  value (if it is an axis)

• Dragging vertically toggles sequence of buttons or changes a 
  sequence of axis values.

9.2 Right button actions

The right mouse button pops up a context-sensitive menu:

• Toggle <something>: Toggle this button

• Change <something>: Change this axis value

• Insert frame after: Insert a frame after this frame

• Append frame: Append a frame to movie

• Append frames: Append specified number of frames to movie

• Delete frame: Delete this frame

• Delete subframe: Delete this subframe

• Truncate movie: Delete this subframe and everything after it.

• Scroll to frame: Prompt for a frame and scroll the display to 
  that frame.

• Scroll to current frame: Scroll the display to current position

• Run to frame: Prompts for frame and runs the emulation to that 
  frame.

• Change number of lines visible: Change the height of the movie 
  display (1 to 255).

• Lock scroll to playback: While playing back or rewinding 
  movies, the display will follow if enabled.

10 Memory watch expression syntax

Memory watch expressions are in RPN (Reverse Polish Notation). At 
the end of expression, the top entry on stack is taken as the 
final result.

Notations:

• Evaluation order is strictly left to right.

• a is the entry on top of stack

• b is the entry immediately below top of stack

• ; separates values to be pushed (no intermediate pop).

• After end of element, all used stack slots are popped and all 
  results are pushed.

• When pushing multiple values, the pushes occur in order shown.

The following operators are available:

• + : a + b

• - : a - b

• * : a * b

• / : a / b

• % : a % b

• a : atan(a)

• b : read_signed_byte(a)

• c : cos(a)

• d : read_signed_dword(a)

• i : quotent(a / b)

• p :\pi


• q : read_signed_qword(a)

• r : sqrt(a)

• s : sin(a)

• t : tan(a)

• u : a; a

• w : read_signed_word(a)

• A : atan2(a, b)

• B : read_unsigned_byte(a)

• C<number>z : Push number <number> to stack.

• D : read_unsigned_dword(a)

• C0x<number>z : Push number <number> (hexadecimal) to stack.

• H<digit> : Set hexadecimal mode with specified number of digits 
  (use A-G for 10-16 digits).

• Q : read_unsigned_qword(a)

• R<digit> : round a to <digit> digits.

• W : read_unsigned_word(a)

10.1 Example:

C0x007e0878zWC0x007e002czW-

1. Push value 0x7e0878 on top of stack (C0x007e0878z).

2. Pop the value on top of stack (0x7e0878), read word value at 
  that address and push the result,call it x1 (W).

3. Push value 0x7e002c on top of stack (C0x007e002cz).

4. Pop the value on top of stack (0x7e002c), read word value at 
  that address and push the result,call it x2 (W).

5. Pop the two top numbers on stack, x1 and x2, substract x1 from 
  x2 and push x2 - x1 (-).

6. Since the expression ends, the final memory watch result is 
  the top one on stack, which is x2 - x1.

11 Modifier and key names:

11.1 SDL Platform

11.1.1 Modifier names

Following modifier names are known:

• ctrl, lctrl, rctrl: Control keys

• alt, lalt, ralt: ALT keys.

• shift, lshift, rshift: Shift keys.

• meta, lmeta, rmeta: Meta keys.

• num, caps: Numlock/Capslock (these are sticky!)

• mode: Mode select.

11.1.2 Key names

Following key names are known:

• backspace, tab, clear, return, pause, escape, space, exclaim, 
  quotedbl, hash, dollar, ampersand, quote, leftparen, 
  rightparen, asterisk, plus, comma, minus, period, slash, 0, 1, 
  2, 3, 4, 5, 6, 7, 8, 9, colon, semicolon, less, equals, 
  greater, question, at, leftbracket, backslash, rightbracket, 
  caret, underscore, backquote, a, b, c, d, e, f, g, h, i, j, k, 
  l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, delete, world_0, 
  world_1, world_2, world_3, world_4, world_5, world_6, world_7, 
  world_8, world_9, world_10, world_11, world_12, world_13, 
  world_14, world_15, world_16, world_17, world_18, world_19, 
  world_20, world_21, world_22, world_23, world_24, world_25, 
  world_26, world_27, world_28, world_29, world_30, world_31, 
  world_32, world_33, world_34, world_35, world_36, world_37, 
  world_38, world_39, world_40, world_41, world_42, world_43, 
  world_44, world_45, world_46, world_47, world_48, world_49, 
  world_50, world_51, world_52, world_53, world_54, world_55, 
  world_56, world_57, world_58, world_59, world_60, world_61, 
  world_62, world_63, world_64, world_65, world_66, world_67, 
  world_68, world_69, world_70, world_71, world_72, world_73, 
  world_74, world_75, world_76, world_77, world_78, world_79, 
  world_80, world_81, world_82, world_83, world_84, world_85, 
  world_86, world_87, world_88, world_89, world_90, world_91, 
  world_92, world_93, world_94, world_95, kp0, kp1, kp2, kp3, 
  kp4, kp5, kp6, kp7, kp8, kp9, kp_period, kp_divide, 
  kp_multiply, kp_minus, kp_plus, kp_enter, kp_equals, up, down, 
  right, left, insert, home, end, pageup, pagedown, f1, f2, f3, 
  f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, numlock, 
  capslock, scrollock, rshift, lshift, rctrl, lctrl, ralt, lalt, 
  rmeta, lmeta, lsuper, rsuper, mode, compose, help, print, 
  sysreq, break, menu, power, euro, undo

• Names of form 'key<n>' where <n> is 0-255 are interpretted as 
  key having hardware-dependent scan code of <n> (useful to bind 
  those keys that don't have symbolic names).

11.1.3 Joystick pseudo-keys:

• joystick<num>button<button>: Joystick <num> (0-based) button 
  <button> (0-based).

• joystick<num>hat<hat>n: Joystick <num> (0-based) hat <hat> 
  (0-based) up.

• joystick<num>hat<hat>w: Joystick <num> (0-based) hat <hat> 
  (0-based) left.

• joystick<num>hat<hat>s: Joystick <num> (0-based) hat <hat> 
  (0-based) down.

• joystick<num>hat<hat>e: Joystick <num> (0-based) hat <hat> 
  (0-based) right.

• joystick<num>axis<axis>-: Joystick <num> (0-based) axis <axis> 
  negative position (axis modes axis and axis_inverse).

• joystick<num>axis<axis>+: Joystick <num> (0-based) axis <axis> 
  positive position (axis modes axis and axis_inverse).

• joystick<num>axis<axis>: Joystick <num> (0-based) axis <axis> 
  pressure (axis modes pressure_*).

11.1.4 Special buttons:

• Escape: Enter/Exit Command mode, cancel modal dialogs.

• Return (also KPEnter): Execute command, ok modal dialog.

• Pgup/Up (also KP8/9 if no num lock, CTRL+P; command mode): 
  Previous command in command history

• Pgdn/Down(also KP2/3 if no num lock, CTRL+N; command mode): 
  Next command in command history

• Home (also KP7 if no num lock, CTRL+A; command mode): Beginning 
  of command.

• End (also KP1 if no num lock, CTRL+E; command mode): End of 
  command.

• Left (also KP4 if no num lock, CTRL+B; command mode): Move 
  cursor left.

• Right (also KP6 if no num lock, CTRL+F; command mode): Move 
  cursor right.

• Delete (also KP. if no num lock; command mode): Delete 
  character to right of cursor.

• Insert (also KP0 if no num lock; command mode): Toggle between 
  insert / overwrite modes.

• Backspace (command mode): Delete character to left of cursor.

• CTRL+LEFT (also ALT+B; command mode): Previous word.

• CTRL+RIGHT (also ALT+F; command mode): Next word.

• ALT+D (also CTRL+W; command mode): Delete word.

• LCTRL+LALT+ESCAPE: Ungraceful shutdown (leaves dump 
  corrupted!).

11.2 wxWidgets platform

11.2.1 Modifier names:

Following modifier names are known:

• alt

• ctrl

• shift 

• meta

• cmd (Mac OS X only)

11.2.2 Key names:

Following key names are known:

• back, tab, return, escape, space, exclaim, quotedbl, hash, 
  dollar, percent, ampersand, quote, leftparen, rightparen, 
  asterisk, plus, comma, minus, period, slash, 0, 1, 2, 3, 4, 5, 
  6, 7, 8, 9, colon, semicolon, less, equals, greater, question, 
  at, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, 
  u, v, w, x, y, z, leftbracket, backslash, rightbracket, caret, 
  underscore, backquote, a, b, c, d, e, f, g, h, i, j, k, l, m, 
  n, o, p, q, r, s, t, u, v, w, x, y, z, leftcurly, pipe, 
  rightcurly, tilde, delete, start, lbutton, rbutton, cancel, 
  mbutton, clear, shift, alt, control, menu, pause, capital, end, 
  home, lefT, up, right, down, select, print, execute, snapshot, 
  insert, help, numpad0, numpad1, numpad2, numpad3, numpad4, 
  numpad5, numpad6, numpad7, numpad8, numpad9, multiply, add, 
  separator, subtract, decimal, divide, f1, f2, f3, f4, f5, f6, 
  f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, 
  f20, f21, f22, f23, f24, numlock, scroll, pageup, pagedown, 
  numpad_space, numpad_tab, numpad_enter, numpad_f1, numpad_f2, 
  numpad_f3, numpad_f4, numpad_home, numpad_left, numpad_up, 
  numpad_right, numpad_down, numpad_pageup, numpad_pagedown, 
  numpad_end, numpad_begin, numpad_insert, numpad_delete, 
  numpad_equal, numpad_multiply, numpad_add, numpad_separator, 
  numpad_subtract, numpad_decimal, numpad_divide, windows_left, 
  windows_right, windows_menu, command, special1, special2, 
  special3, special4, special5, special6, special7, special8, 
  special9, special10, special11, special12, special13, 
  special14, special15, special16, special17, special18, 
  special19, special20

12 Movie file format

Movie file is .zip archive in itself, normal ZIP archive tools 
work on it (note: If you recompress it, do not use compression 
methods other than store and deflate and especially do not use 
encryption of any kind).

12.1 Detecting clean start/SRAM/Savestate

• If file has member “savestate” it is savestate, otherwise:

• If file has members with names starting “moviesram.” it is 
  movie starting from SRAM, otherwise:

• It is movie starting from clear state.

12.2 Member: gametype

Type of game ROM and region (as one line). Valid values are:


+--------------+---------------------+--------+
|    Value     |       System        | Region |
+--------------+---------------------+--------+
+--------------+---------------------+--------+
|  snes_pal    |     Super NES       |  PAL   |
+--------------+---------------------+--------+
|   sgb_pal    |   Super Game Boy    |  PAL   |
+--------------+---------------------+--------+
|  snes_ntsc   |     Super NES       |  NTSC  |
+--------------+---------------------+--------+
|  sgb_ntsc    |   Super Game Boy    |  NTSC  |
+--------------+---------------------+--------+
|     bsx      | BS-X (non-slotted)  |  NTSC  |
+--------------+---------------------+--------+
| bsxslotted   |   BS-X (slotted)    |  NTSC  |
+--------------+---------------------+--------+
| sufamiturbo  |    Sufami Turbo     |  NTSC  |
+--------------+---------------------+--------+


Frame rates are:


+---------+-----------------+
| Region  | Framerate (fps) |
+---------+-----------------+
+---------+-----------------+
|  PAL    |   322445/6448   |
+---------+-----------------+
|  NTSC   | 10738636/178683 |
+---------+-----------------+


12.3 Member: port1

Contains type of port #1 (as one line). Valid values are 'none', 
'gamepad', 'multitap' and 'mouse'. If not present, defaults to 
'gamepad'.

12.4 Member: port2

Contains type of port #2 (as one line). Valid values are 'none', 
'gamepad', 'multitap', 'mouse', 'superscope', 'justifier' and 
'justifiers'. If not present, defaults to 'none'.

12.5 Member: gamename

Contains name of the game (as one line).

12.6 Member: authors

Contains authors, one per line. Part before '|' is the full name, 
part after is the nickname.

12.7 Member: systemid

Always “lsnes-rr1” (one line). Used to reject other saves.

12.8 Member: controlsversion

Always “0” (one line). Used to identify what controls are there.

12.9 Member: “coreversion”

Contains bsnes core version number (as one line).

12.10 Member: projectid

Contains project ID (as one line). Used to identify if two movies 
are part of the same project.

12.11 Member: {rom,slota,slotb}{,xml}.sha256

Contains SHA-256 of said ROM or ROM mapping file (as one line). 
Absent if corresponding file is absent.

12.12 Member: moviesram.<name>

Raw binary startup SRAM of kind <name>. Only present in 
savestates and movies starting from SRAM.

12.13 Member: saveframe

Contains frame number (as one line) of frame movie was saved on. 
Only present in savestates.

12.14 Member: lagcounter

Current value of lag counter (as one line). Only present in 
savestates.

12.15 Member: pollcounters

Contains poll counters (currently 100 of them), one per line. 
Each line is raw poll count if DRDY is set for it. Otherwise it 
is negative poll count minus one. Only present in savestates.

12.16 Member: hostmemory

Raw binary dump of host memory. Only present in savestates.

12.17 Member: savestate

The raw binary savestate itself. Savestate detection uses this 
file, only present in savestates.

12.18 Member: screenshot

Screenshot of current frame. Only present in savestates. First 2 
bytes are big-endian width of image, rest are 24-bit RGB image 
data. Height of image is inferred from the width and size of 
data.

12.19 Member: sram.<name>

Raw binary SRAM of kind <name> at time of savestate. Only present 
in savestates.

12.20 Member: input

The actual input track, one line per subframe (blank lines are 
skipped).

• If the first byte of each line is '.', ' ', <tab> or '|', then 
  the line is part of same frame as previous, otherwise it starts 
  a new frame.

• First subframe must start a new frame.

Length of movie in frames is number of lines in input file that 
start a new frame.

12.21 Member: subtitles

Subtitle track. Optional.

• Each line is in form <firstframe> <numframes> <text>.

• Linefeed is encoded as \n, backslash is encoded as \\.

12.22 Member: rerecords

Contains textual base-10 rerecord count (as one line; emulator 
just writes this, it doesn't read it) + 1.

12.23 Member: rrdata

This member stores set of load IDs. There is one load ID per 
rerecord (plus one corresponding to start of project).

• This member constists of concatenation of records

• Each record is 2-36 bytes long and can represent 1-16,843,009 
  consequtive IDs.

• IDs are interpretted as 256-bit big-endian integers with 
  warparound.

• Initial predicted ID is all zeroes.

Format of each record is:

• 1 byte: Opcode byte. Bits 0-4 are prefix length (prefixlen), 
  bits 5-6 are count length (countlen). Bit 7 is unused.

• 32-prefixlen bytes of ID.

• countlen bytes of big-endian count (count).

Records are processed as follows:

• To form the first ID encoded by record, take the first 
  prefixlen bytes predicted ID and append the read ID value to 
  it. The result is the first ID encoded.

• If countlen is 0, record encodes 1 ID.

• If countlen is 1, record encodes 2+count IDs.

• If countlen is 2, record encodes 258+count IDs.

• If countlen is 3, record encodes 65794+count IDs.

• The new predicted ID is the next ID after last one encoded by 
  the record.

The number of rerecords + 1 is equal to the sum of number of IDs 
encoded by all records.

12.24 Member: starttime.second

Movie starting time, second part. Epoch is Unix epoch. Default is 
1,000,000,000.

12.25 Member: starttime.subsecond

Movie starting time, subsecond part. Unit is CPU clocks. Default 
is 0.

12.26 Member: savetime.second

Movie saving time, second part. Default is starttime.second. Only 
present in savestates.

12.27 Member: savetime.subsecond

Movie saving time, subsecond part. Default is 
starttime.subsecond. Only present in savestates.

13 lsvs file format (commentary tracks)

13.1 Clusters

• Each cluster is 8kB (8192 bytes) in size.

• Cluster n starts at offset 8192*n in file.

• The following clusters are system special:

  – Cluster 0 and all clusters with number multiple of 2048 
    (cluster tables)

  – Cluster 1 (superblock)

13.2 Cluster tables

• The cluster table describing cluster n is stored in cluster n & 
  ~0x7FF (zero last 11 bits of n).

• This cluster table consists of 2048 4-byte big-endian integers.

• Each entry describes a cluster in 16MB supercluster, in order.

• The valid values for entries are:

  – 0x00000000: Free cluster

  – 0x00000001: Last cluster in chain.

  – 0xFFFFFFFF: System cluster (cluster tables and superblock)

  – (anything else): Number of next cluster in chain. Must not be 
    multiple of 2048.

• Due to limitations of the format, there can be at most 2097052 
  superclusters, giving maximum file size of 16TB.

13.3 Stream table

• The stream table chain always starts in cluster 2.

• Otherwise, it follows normal chaining.

• The stream table consists of 16-byte entries:

  – The first 8 bytes of entry give big-endian beginning position 
    of stream in units of 1/48000 s.

  – The next 4 bytes of entry give big-endian beginning cluster 
    for control data. 0 here marks the entry as not present.

  – The last 4 bytes of entry give big-endian beginning cluster 
    for codec data.

• Stream table clusters are normal clusters, following normal 
  chaining.

• The stream begnning position is not guarenteed unique. There 
  can be multiple streams with the same starting position in the 
  file.

13.4 Stream control data

• The stream control data consists of entries 4 bytes each:

  – The first 2 bytes of entry gives big-endian length of packet

  – The next byte of entry gives audio length of packet in units 
    of 1/400 s.

  – The last byte is control byte.

    ∗ 0 means this entry is not present and the control data 
      ends.

    ∗ 1 is valid control entry.

• The stream control data can also end by running into end of the 
  readable chain.

  – This happens if there happens to be exact multiple of 2048 
    packets in stream and number of packets is nonzero.

• These clusters follow normal chaining.

13.5 Stream codec data

• Stream codec data consists of raw Opus data packets packed back 
  to back with nothing in between.

• Warning: Due to internal limitations, this data must reside in 
  the first 65536 superclusters (that is, the first 1TB of the 
  file).

13.6 Superblock

• The superblock is stored in cluster 1. 

• The first 11 bytes are “sefs-magic”<NUL>.

• The rest are unused.

• This cluster 1 is marked as system special.

14 Known ROM extensions

• SNES cartridge ROMs: sfc, smc, swc, fig, ufo, sf2, gd3, gd7, 
  dx2, mgd, mgh.

• DMG cartridge ROMs: dmg, gb.

• GBC cartridge ROMs: cgb, gbc.

15 Gamepack files

• The first line must be: “[GAMEPACK FILE]”.

• There is one needed line: “type <systype>”. This sets system 
  type to <systype>. The following system types are valid:

  – snes (SNES)

  – bsx (BS-X non-slotted)

  – bsxslotted (BS-X slotted)

  – sufamiturbo (Sufami Turbo)

  – sgb (Super Game Boy)

  – dmg (Game Boy)

  – gbc (Game Boy Color)

  – gbc_gba (Game Boy Color with GBA initial register values)

• Optionally a region can be specified: “region <region>”. The 
  following values are valid:

  – autodetect (Autodetect region: snes and sgb only)

  – ntsc (NTSC: snes, bsx, bsxslotted, sufamiturbo, sgb)

  – pal (PAL: snes, sgb)

  – world (World: dmg, gbc, gbc_gba)

• ROM images are loaded as: “rom <type> <file>”. The following 
  types are valid:

  – rom (Cartridge ROM in snes, dmg, gbc, gbc_gba. BIOS in bsx, 
    bsxslotted, sufamiturbo)

  – bsx (Cartridge ROM in bsx, bsxslotted)

  – slot-a (Cartridge ROM in sufamiturbo)

  – slot-b (Cartridge ROM in sufamiturbo)

• ROM markup can be loaded as: “xml <type> <file>”. The types 
  valid are the same as for ROMs.

• Patches can be loaded as “patch[<offset>] <type> <file>”. The 
  types are the same as for ROMs.

  – Offset is given in form [+-]<number>. Usually offset is 
    either +0 or -512.

  – Default offset is +0.

15.1 Example:

[GAMEPACK FILE]

type snes

rom rom speedygonzales.sfc

patch-512 rom sonicthehedgehog.ips

15.2 Example 2:

[GAMEPACK FILE]

type sgb

rom rom supergameboy.sfc

rom dmg megamanV.dmg

16 Quick'n'dirty encode guide

1. Start the emulator and load the ROM and movie file.

2. Set large AVI option 'set-setting avi-large on'

3. Enable dumping 'dump-avi tmpdump' 

4. Unpause and let it run until you want to end dumping.

5. Close the emulator (closing the window is the easiest way). Or 
  use 'end-avi'.

6. For each tmpdump*.avi file created, on command prompt, do 
  'x264 --crf 10 -o tmpdump_<numbers>.mkv tmpdump_<numbers>.avi'.

7. Do 'sox tmpdump.sox tmpdump.ogg rate -v 32000'

8. Do 'mkvmerge -o tmpdump_video.mkv tmpdump_0000000.mkv + 
  tmpdump_0000001.mkv + tmpdump_0000002.mkv' (list every 
  tmpdump_<numbers>.mkv, with + in between).

9. Do 'mkvmerge -o final.mkv tmpdump_video.mkv tmpdump.ogg'. Now 
  final.mkv contains quick'n'dirty encode.

17 Axis configurations for some gamepad types:

17.1 XBox360 controller:

Axes 2 and 5 (joystick<n>axis2 and joystick<n>axis5) should be 
set to pressure-+.

set-axis joystick0axis2 pressure-+

set-axis joystick0axis5 pressure-+

• This is needed for SDL only. EVDEV sets those types correctly.

17.2 PS3 “sixaxis” controller:

Axes 8-19 should be disabled.

set-axis joystick0axis8 disabled

set-axis joystick0axis9 disabled

set-axis joystick0axis10 disabled

set-axis joystick0axis11 disabled

set-axis joystick0axis12 disabled

set-axis joystick0axis13 disabled

set-axis joystick0axis14 disabled

set-axis joystick0axis15 disabled

set-axis joystick0axis16 disabled

set-axis joystick0axis17 disabled

set-axis joystick0axis18 disabled

set-axis joystick0axis19 disabled

18 Errata:

18.1 Problems from BSNES core:

• The whole pending save stuff.

• Lack of layer hiding.

• It is slow (especially accuracy).

• Firmwares can't be loaded from ZIP archives.

18.2 Other problems:

• Modifiers don't work with pseudo-keys (SDL, EVDEV).

• Audio for last dumped frame is not itself dumped.

• Audio in UI is pretty bad in quality if game doesn't run at 
  full speed.

• No menus, command based interface (SDL).

• Long commands don't scroll.

19 Changelog:

19.1 rr0-beta1

• Fix -Wall warnings

• Fix dumper video corruption with levels 10-18.

19.2 rr0-beta2

• Autofire

• Lots of code cleanups

• Lua interface to settings

• Allow specifying AVI borders without Lua

• Fix scaling if vscale > 1 and originx > 0 (left border exists)

• on_snoop lua callback

• Faster movie loading and saving.

19.3 rr0-beta3

• Joystick support

19.4 rr0-beta4

• Fix multi-buttons

• Save jukebox functionality.

19.5 rr0-beta5

• Try to fix some nasty failing movie load edge cases

• Allow specifying scripts to run on command line.

19.6 rr0-beta6

• Major source code reorganization.

• Backup savestates before overwriting.

• Don't crash if loading initial state fails.

19.7 rr0-beta7

• Fix firmware lookup

• Fix author name parsing

• Fix rerecord counting

• (SDL) Print messages to console if SDL is uninitialized

• Add movieinfo program

• Fix loading movies starting from SRAM.

19.8 rr0-beta8

• Add support for unattended dumping

• Fix compiling for Win32

• Don't lock up if sound can't be initialized

• Strip trailing CR from commands

• Don't try to do dubious things in global ctors (fix crash on 
  startup)

19.9 rr0-beta9

• Small documentation tweaking

• Fix make clean

• Fix major bug in modifier matching

19.10 rr0-beta10

• Lots of documentation fixes

• Use dedicated callbacks for event backcomm., not commands.

• Ensure that the watchdog is not hit when executing delayed 
  reset.

• Remove errant tab from joystick message.

19.11 rr0-beta11

• Make autofire operate in absolute time, not linear time

• Reinitialize controls when resuming from loadstate

• Some more code cleanups

• If Lua allocator fails, call OOM_panic()

• Byte/word/dword/qword sized host memory write/read functions.

• Dump at correct framerate if dumping interlaced NTSC 
  (height=448).

19.12 rr0-beta12

• Actually include the complete source code

• Keep track of RTC

19.13 rr0-beta13

• Document {save,start}time.{,sub}second.

• Intercept time() from bsnes core.

19.14 rr0-beta14

• Allow disabling time() interception (allow build on Mac OS X)

• Use SDLMain on Mac OS X (make SDL not crash)

• Disable delayed resets (just plain too buggy for now).

• Code cleanups

• Use 16-bit for graphics/video instead of 32-bit.

• gui.rectangle/gui.pixel

• gui.crosshair

• New CSCD writer implementation.

19.15 rr0-beta15

• Fix interaction of * and +.

• Manual improvements

• Use gettimeofday()/usleep(), these seem portable enough.

• Move joystick axis manipulation to keymapper code.

• Changes to how read-only works.

• Refactor controller input code.

19.16 rr0-beta16

• Fix mouseclick scale compensation.

• Draw area boundaries correctly in SDL code.

• gui.screenshot.

• Fix CSCD output (buffer overrun and race condition).

19.17 rr0-beta17

• JMD dumping support.

• Allow unattended dumping to JMD.

• Move to BSNES v083.

• Switch back to 32-bit colors.

• Add Lua function gui.color.

• Use some new C++11 features in GCC 4.6.

• Be prepared for core frequency changes.

• Pass colors in one chunk from Lua.

19.18 rr0-beta18

• New lua functions gui.line(), gui.status() and gui.circle(), 
  memory.vma_count(), memory.read_vma() and memory.find_vma().

• Numerious documentation fixups

• RTC time format changed

• Reformat flags display

• Allow lua package name to be overridden

• SDUMP (high-quality dumping).

• Split platform support to plugins.

• Make all sound plugins support basic sound commands

• Support portaudio for sound.

• Allow disable Lua/SDL searching.

• Upconvert colors when copying lcscreen to screen.

• Reorganize source tree.

• Evdev joystick support.

• Refactor more code into generic window code.

19.19 rr0-beta19

• Refactor message handling.

• Rework makefile

• Documentation fixes

• Finish pending saves before load/quit.

• Wxwidgets graphics plugin.

19.20 rr0-beta20

• Get rid of win32-crap.[ch]pp.

• Move files around a lot.

• Get rid of need for host C++ compiler.

• Bsnes v084 core.

• Refactor inter-component communication.

• Fix zero luma.

• Fix crash on multiline aliases.

• Load/Save settings in wxwidgets gui.

19.21 rr0-beta21

• Patch problems in bsnes core

• SNES is little-endian, not big-endian!

• Fix memory corruption in lcscreen::load()

19.22 rr0-beta22

• Fix interpretting repeat counts in rrdata loading.

• New lua callback: on_frame()

• Remove calls to runtosave() that aren't supposed to be there

• Lua function: movie.read_rtc()

• Ignore src/fonts/font.cpp

• Fix more bsnes core problems

• Control bsnes random seeding

• Pause-on-end

• Some bsnes core debugging features (state dump and state hash)

• Fix titlebar version number (no, the last version wasn't 
  'lsnes-0-beta21', it was 'lsnes rr0-beta21').

19.23 rr0-beta23

• Fix memory corruption due to macro/field mixup

• search-memory update

• Allow direct-mapped framebuffer

• SDL: Use SDL_ANYFORMAT if possible

• SDMP2SOX: 2s delay modes.

• Wxwidgets: Cleanups

• Use sed -E, not sed -r. Fixes building on Mac OS X.

• Wxwidgets: Save jukebox on exit

• Fix RTC if using load-movie on savestate.

• Fix crash related to full console mode.

19.24 rr0-beta24

• Wxwidgets: Allow bringing application to foreground on Mac OS 
  X.

• Wxwidgets: Allow compiling on Mac OS X.

• Use movie compare instead of movie hashing (faster save/load).

• Lua: _SYSTEM table.

19.25 rr0-beta25

• sdmp2sox: Pad soundtrack if using -l or -L.

• sdmp2sox: Fix NTSC overscan.

• sdmp2sox: Add AR correction mode.

• call lua_close() when exiting.

• Fix zip_writer bug causing warnings from info-zip and error 
  from advzip.

19.26 rr0-beta26

• Fix IPS patching code (use bsnes core IPS patcher).

• Implement BPS patching (using bsnes core IPS patcher).

• Add feature to load headered ROMs.

19.27 rr0-beta27

• Show command names when showing keybindings

19.28 rr0

• Fix pause-on-end to be actually controllable

• SDL: Poll all events in queue, not just first one (fixes 
  slowness in command typing)

• Wxwidgets: Fix ROM loading.

19.29 rr1-beta0

• Lua: Add gui.textH, gui.textV, gui.textHV

• Fix text colors on SDL on Mac OS X

• Mode 'F' for finished in readonly mode.

• Fix some WS errors.

• Reliably pause after skip poll

• Split UI and core into their own threads

19.30 rr1-beta1

• Remove leftover dummy SRAM slot

• Fix controller numbers.

19.31 rr1-beta2

• Fix lsnes-dumpavi after interface change.

• Also give BSNES patches for v085.

• Pack movie data in memory.

19.32 rr1-beta3

• Fix framecount/length given when loading movies.

• Controller command memory leak fixes.

• Don't leak palette if freeing screen object.

19.33 rr1-beta4

• Detect revisions.

• Wxwidgets: Allow controlling dumper from the menu.

19.34 rr1-beta5

• Rewrite parts of manual

• Lua: Make it work with Lua 5.2.

19.35 rr1-beta6

• Win32: Fix compile errors.

19.36 rr1-beta7

• Refactor controller input code.

• Fix crash when using command line on SDL / Mac OS X.

19.37 rr1-beta8

• Delete core/coroutine (obsolete)

• Lag input display by one frame.

• Rewind movie to beginning function.

• Fix wrong frame number reported to Lua when repainting after 
  loadstate

• Support UI editing of jukebox

• Wxwidgets: Save settings on exit.

• Support ${project} for filenames

• SDL: Fix command history

19.38 rr1-beta9

• Fix some order-of-global-ctor bugs.

19.39 rr1-beta10

• Fix crashes when quitting on Win32.

19.40 rr1-beta11

• EVDEV: Queue keypresses from joystick, don't send directly

• Wxwidgets: Load-Preserve that actually works.

19.41 rr1-beta12

• Wxwidgets: GUI for memory search.

• Warn about using synchronous queue in UI callback.

19.42 rr1-beta13

• Remember last saved file for each ROM

• Support MT dumping via boost.

• Lua: input.raw

• Lua: input.keyhook

• Make mouse be ordinary input instead of special-casing

• SDL: Don't screw up commands with NUL codepoints.

19.43 rr1-beta14

• Merge status panel and main window

• True movie slot support (the rest of it)

• SDL: Fix compilation error

• Elminate cross calls in dump menu code.

19.44 rr1-beta15

• Cancel pending saves command

• Wxwidgets: Code refactoring

• Wxwidgets: Fix system -> reset

• Wxwidgets: Read watch expressions in the right thread

19.45 rr1-beta16

• Wxwidgets: Don't prompt for member when running Lua script (Lua 
  doesn't support that).

• Wxwidgets: 128 -> 1024 Autohold slots (in case more are 
  needed).

• Don't append trailing '-' to prefix when saving movie.

• Fix ROM/savestate handling (don't let user mismatch ROM and 
  savestates).

19.46 rr1

• Document memory watch syntax.

19.47 rr1-delta1

• Fix unattended dumping (lsnes-dumpavi)

• Support RAW dumping

• Use adv_dumper instead of the old interface in lsnes-dumpavi 
  (changes syntax)

• Add option to control sample rate preturbation in AVI dumper

19.48 rr1-delta2

• Wxwidgets: Fix dumper submodes

• Set core controller types before loadstate

19.49 rr1-delta2epsilon1

• Fix compiling with bsnes v086.

19.50 rr1-delta3

• Don't prompt before quitting

• Start unpaused, preserve pause/unpause over load.

• Try to autodetect if ROM is headered.

• Wxwidgets: Only bring up ROM patching screen if specifically 
  requested.

• Allow configuring some hotkeys.

19.51 rr1-delta4

• Lots of code cleanups

• Fix JMD compression (JMD dumping was broken)

• Don't crash if Lua C function throws an exception.

• Support bitmap drawing in Lua.

• Fix bsnes v085/v086 patches.

• Improve stability on win32.

19.52 rr1-delta4epsilon1

• Don't corrupt movie if movie length is integer multiple of 
  frames per page.

19.53 rr1-delta5

• New Lua hooks: on_rewind, on_frame_emulated, on_idle, on_timer

• New Lua functions: emulator_ready(), utime(), 
  set_idle_timeout(), set_timer_timeout(), bit.extract(), 
  bit.value(), input.geta(), input.seta() and 
  input.controllertype()

• Wxwidgets: Fix internal focus lost (hotkeys stop working)

• Wxwidgets: Fix broken modifiers

• on_paint has parameter now.

• Optional initital fill for bitmaps

• Fix palette changing.

• Optimize rendering a bit.

• Bsnes v087 support.

19.54 rr1-delta5epsilon1

• Movieinfo: Fix display of port #2 type.

• Call on_input() after loadstate.

19.55 rr1-delta5epsilon2

• Fix writing port2 data to movie.

• Fix SRAM handling with Bsnes v087.

19.56 rr1-delta6

• Library loading support

• Built-in TSCC encoder

• Hi-color (256T colors) dumping.

• Dump over TCP/IP(v6)

• Hidable status panel

• Turbo toggle/hold

• Adjustable sound volume

• Screen scaling

• Allow DnD into filename boxes

• Configurable paths

• Portaudio: Fix speaker popping at start

• Lots of UI changes

• Speed adjustment menu

• Win32 joystick support

• Lua: gui.rainbow and gui.box

• Split key lists into classes (the key list was large!)

• More save slots support

• Wxwidgets (wxJoystick) joystick support

19.57 rr1-delta7

• Lots of internal joystick refactoring

• Evdev: Add mapping for BTN_TOOL_QUINTTAP

• Wxwidgets: Settings mode (open settings without ROM)

• Wxwidgets: Prompt key to use option

• Wxwidgets: Fix crash if key goes away underneath

• Wxwidgets: Fix mouse position in presence of scaling

• AVI dumper: Mode 4 (high-quality resampling to common rate 
  using SRC)

• Wxwidgets: Redesign hotkeys dialog to avoid tree control (tree 
  control doesn't seem to work well on WinXP)

• Start paused option.

19.58 rr1-delta7epsilon1

• AVI: ZMBV support

• lsnes-dumpavi: Start Lua before starting dumper

• AVI: Fix secondary audio in mode 4.

19.59 rr1-delta7epsilon2

• AVI: Refactor ZMBV a bit.

• Fix error reading analog values from movie file

19.60 rr1-delta8

• Delayed reset support

• Lua: memory.hash_region

19.61 rr1-delta8epsilon1

• Rework the build system

• Typing input support

• Fix building with bsnes v086 and v087.

• SDL: Save settings on exit

• SDL: Command to enter command line mode with given command.

• SDL: More advanced command editing.

19.62 rr1-delta9

• wxMSW: Fix the “arrow keys and enter don't work” problem

• MSU-1 support

• Show mode changes due to rewinding.

• Unsafe rewind support

• Fix directory transversal.

19.63 rr1-delta10

• AVI: Sound mode 5 (48kHz high-quality)

• Lua: Reset Lua VM

• Map the SNES bus into address space

• Fix loading memory watch files with CRLF line endings

19.64 rr1-delta10epsilon1

• Map bsnes internal state into memory space

• Fix the “click on panel wedges the emulator” for real.

• DnD movies/saves on the main window.

19.65 rr1-delta11

• Split core bindings into own module.

• Remember invalid settings

• Support for modified Gambatte core for GB/GBC emulation.

• Reload/swap ROM function

19.66 rr1-delta11epsilon1

• Fix step poll function

19.67 rr1-delta12

• Non-insane savestate anchoring

19.68 rr1-delta13

• More Memory search methods

• Preserve movie if loading in RO mode.

• Fix a obscure case in timeline check

• Revamp the entiere ROM loading code

• Support DnD on ROMs

• Revamp menu layout

• Standalone hotkey config dialog

• Show bindings in more user-friendly format

19.69 rr1-delta13epsilon1

• Pipedec support

• Fix uninitialized variables in bsnes v085

19.70 rr1-delta14

• Merge gambatte core into mainline (from its own branch)

• Wxwidgets: Show expected dump file formats

• Memory watch: Data typing

• lsnes internal MMIO area.

• Wxwidgets: New memory watch editor

• Hexadecimal memory watches

• Wxwidgets: Monospaced panel

• Wxwidgets: Split memory watches in panel

• Wxwidgets: Disable VMAs in memory search

• lsnes-dumpavi: Fix speed bug

• Movie subtitle support

• Fix rerecord count reporting

• Don't trash movie when loading in readonly mode.

19.71 rr1-delta14epsilon1

• Wxwidgets: Fix crashes on closing settings dialogs on Mac OS X.

• Fix build on Mac OS X.

• Lua: loopwrapper

• Wxwidgets: Hidable messages window

• Lua: input.joyset

• Bsnes: Support inconsistent saves

• Bsnes: Allow simulating saving every frame

• Fix desync if savestate is loaded in readonly mode in certain 
  conditions.

• Wxwidgets: Fix save dialogs on Mac OS X.

• Wxwidgets: Fix insane status width on Win32.

• Wxwidgets: Fix autohold processing to be faster.

• Wxwidgets: Allow loading ROMs and movies from commandline.

19.72 rr1-delta15

• Be a bit smarter with --load

• Rewrote higher-level parts of audio system

• Tool to build commentary tracks

• Lua: input.joyget

• Gambatte: Add support for SVN358

• Use builtin font when rendering status panel.

• Option to detach memory watch to its own window.

• Recent ROMs/Movies menu

• Libao support

• Useful lag counter for SNES games that autopoll

• Fix buffer overflow in gambatte sound output

19.73 rr1-delta15epsilon1

• Don't blow up on wxGTK if the window is hidden somehow

• Support simultaneous drop of ROM and movie.

• Gambatte: Don't save spurious SRAMs.

• Make SGB ROMs actually usable.

• Fix so that saved movies appear in recent movies.

• Don't open multiple commentary editors at once.

19.74 rr1-delta15epsilon2

• Lua: memory.readregion/memory.writeregion

• Lua: memory.map{,s}{byte,word,dword,qword}

• Lua: memory.map_structure

• Lua: Fix bus_address for gambatte

• Fix features dependent of bsnes debugger

• Cleanup bsnes debugger logic

• Fix resets in presence of save every frame

19.75 rr1-delta15epsilon3

• Lua: input.lcid_to_pcid

• Fix off-by-one bug with slot hashes

• Fix crashes on certain memory watch expressions

• Lua: memory.read_expr

• Lua: Fix memory.read_expr on nil argument

• Fix the code to compile on G++ 4.7

• Change button_id to be a function pointer field, not a virtual 
  method

• Add bsnes patches to fix libsnes to compile on GCC 4.7

• Gambatte: Always use legacy lag counting

• Memory commands: Memory addresses are up to 16 hex digits, not 
  up to 8

• Fix analog controllers

• Fix autohold menus

• Fix button symbols in input display

• Compensate for nuts bsnes superscope/justifier handling

• Lua: Fix bit.extract boolean handling

19.76 rr1-delta16

• Stop at movie end: Don't off-by-one

• Fix crash closing lsnes with voice playback active.

• Import/Export OggOpus for commentary tracks

• 16-button controllers.

• Don't show nonexistent controllers in input display

• Set voice record/playback volume from UI

• Patches for gambatte SVN364.

• Load markup (if exists) even without gamepack file.

• Screen rotation & flipping

• Lua: Some new bit functions

• Auto-refresh voice streams on change.

• Auto-refresh subtitles on change & new subtitle editor.

• Fix music volume adjustment.

19.77 rr1-delta16epsilon1

• Wxwidgets: Fix memory watch rendering.

• Wxwidgets: Allow setting voice stream gain.

• Wxwidgets: VU meters and volume adjustment.

• Lua: Custom fonts support.

• Lua: Fix methods stopping working when resetting Lua.

• Fix loading standard-format movies in preserve (readonly) mode.

19.78 rr1-delta17

• Primitive movie editor

• Fix VU meter with no sound device.

• Fix various undefined return values.

• Show rates in VU meter window.

19.79 rr1-delta17epsilon1

• Commentary tool: Set nominal bit rate and limit max bit rate.

• Lua: Unconditionally reload host memory on loadstate

• Lua: Query bindings, manipulate aliases, create inverse 
  bindings

• Lua: Fix crashes with resetting VM while some types of paint 
  requests are in flight.

• Lua: gui.text: Clip the text properly instead of corrupting 
  memory in some cases.

• Save screenshot header reliably

• Lua: Backport input.get2 and input.set2

• Lua: New controller info functions.

• Movie editor: Fix reset delay counters to be the right way 
  around.

• Lua: on_snoop2

• Lua: on_button and input.veto_button.

19.80 rr1-delta17epsilon2

• Fix saving PNG screenshots on Win32.

• Movie editor: Sweep axis.

• Load selected slot in ro/rw/preserve/movie mode.

• input.joyset: Preserve and invert user input.

• Allow immediate saving at point of save (transfer saves).

• Wxwidgets: Filter filenames in dialogs, autoappend extensions.

• data/verysmall.font: Add missing glyph 70 (“F”).

• Lua: Allow painting custom fonts with halo.

• Fix memory value search to work on byte types.

19.81 rr1-delta17epsilon3

• Fix status panel (and movie editor) flicker

• Show effects of Lua in input display

• Offer lsmv.backup as file filter too for load lsmv

• Allow slowing down subframe advance 

• Display current save slot information

• Add snes9x fonts

• Fix hotkeys stopping working after X-ing settings dialog

• Movie editor: Fix bug if extending finished movie

• Cap current_frame_first_subframe to movie size when recounting 
  movie

• Movie editor: Interpret ctrl+click as right click 

